#!/usr/bin/env bash
source "$HOME/.dotfiles/Helpers/colors.sh"

CONFIG_FILE="$HOME/.dotfiles/config.json"

TARGET_FILE=""
USE_STDIN=false

while [[ $# -gt 0 ]]; do
	case "$1" in
		--stdin-filepath)
			shift
			TARGET_FILE="$1"
			USE_STDIN=true
			;;
		*)
			if [[ -z "$TARGET_FILE" ]]; then
				TARGET_FILE="$1"
			fi
			;;
	esac
	shift
done

if [ -z "$TARGET_FILE" ]; then
	error "Error: Please provide a file path or --stdin-filepath."
	exit 1
fi

FILENAME=$(basename "$TARGET_FILE")

USER=$(jq -r '."CodamHeader"."username" // empty' "$CONFIG_FILE" 2>/dev/null)
MAIL=$(jq -r '."CodamHeader"."email" // empty' "$CONFIG_FILE" 2>/dev/null)
LEN=$(jq -r '."CodamHeader"."length"' "$CONFIG_FILE")
MARGIN=$(jq -r '."CodamHeader"."margin"' "$CONFIG_FILE")
ASCII=()
while IFS= read -r line; do
	ASCII+=("$line")
done < <(jq -r '."CodamHeader"."asciiart"[]' "$CONFIG_FILE")

USER=${USER:-$(whoami)}
MAIL=${MAIL:-user@example.com}

detect_comment_style() {
	case "$FILENAME" in
		*.c|*.h)
			COMMENT_LEFT="/*"
			COMMENT_RIGHT="*/"
			COMMENT_FILL="*"
			;;
		Makefile|*.mk)
			COMMENT_LEFT="#"
			COMMENT_RIGHT="#"
			COMMENT_FILL="*"
			;;
		*)
			COMMENT_LEFT="/*"
			COMMENT_RIGHT="*/"
			COMMENT_FILL="*"
			;;
	esac
}
detect_comment_style

generate_line() {
	local text="$1" right="$2"
	local max_len=$(( LEN - (MARGIN * 2) - ${#COMMENT_LEFT} - ${#COMMENT_RIGHT} - 2 - ${#right} ))
	local margin=$(printf '%*s' "$MARGIN")
	local spaces=$(printf '%*s' $(( max_len - ${#text} )))

	echo "$COMMENT_LEFT $margin$text$spaces$right$margin $COMMENT_RIGHT"
}

generate_header() {
	local fill_line="$COMMENT_LEFT $(printf '%*s' $(( LEN - ${#COMMENT_LEFT} - ${#COMMENT_RIGHT} - 2 )) | tr ' ' "$COMMENT_FILL") $COMMENT_RIGHT"
	local empty_line=$(generate_line "" "")
	local date=$(date +"%Y/%m/%d %H:%M:%S")

	echo "$fill_line"
	echo "$empty_line"
	echo "$(generate_line "" "${ASCII[0]}")"
	echo "$(generate_line "$FILENAME"  "${ASCII[1]}")"
	echo "$(generate_line "" "${ASCII[2]}")"
	echo "$(generate_line "By: $USER <$MAIL>" "${ASCII[3]}")"
	echo "$(generate_line "" "${ASCII[4]}")"
	echo "$(generate_line "Created: $date by $USER" "${ASCII[5]}")"
	echo "$(generate_line "Updated: $date by $USER" "${ASCII[6]}")"
	echo "$empty_line"
	echo "$fill_line"
}

has_header() {
	local expected=("$@")
	local -a line_numbers=(1 2 10 11)

	for i in "${!line_numbers[@]}"; do
		local n="${line_numbers[$i]}"
		local file_line=$(sed -n "${n}p" "$TMPFILE")

		[[ "$file_line" == "${expected[$n-1]}" ]] || return 1
	done
	return 0
}

insert_header() {
	tmpfile=$(mktemp)
	{
		printf "%s\n" "${header[@]}"
		echo ""
		cat "$TMPFILE"
	} > "$tmpfile"

	mv "$tmpfile" "$TMPFILE"
}

update_header() {
	local created_line=$(sed -n '8p' "$TMPFILE")

	new_header=()
	while IFS= read -r line; do
		new_header+=("$line")
	done < <(generate_header)

	local last_ascii="${ASCII[6]}"
	local sum=$(( ${#last_ascii} + MARGIN + ${#COMMENT_LEFT} + ${#COMMENT_RIGHT} + 2 ))

	local prefix="${created_line:0:${#created_line}-$sum}"
	local suffix="${new_header[7]: -$sum}"
	new_header[7]="$prefix$suffix"

	tmpfile=$(mktemp)
	{
		printf "%s\n" "${new_header[@]}"
		tail -n +$((${#new_header[@]}+1)) "$TMPFILE"
	} > "$tmpfile"

	mv "$tmpfile" "$TMPFILE"
}

stdheader()
{
	header=()
	while IFS= read -r line; do
		header+=("$line")
	done < <(generate_header)

	if has_header "${header[@]}"; then
		update_header
	elif [ $(jq -r '."CodamHeader"."autoinsert"' "$CONFIG_FILE") == true ]; then
		insert_header
	fi
}

if $USE_STDIN; then
	TMPFILE=$(mktemp)
	cat /dev/stdin > "$TMPFILE"
else
	TMPFILE="$TARGET_FILE"
fi

stdheader

if $USE_STDIN; then
	cat "$TMPFILE"
	rm "$TMPFILE"
fi
