#!/usr/bin/env bash
source "$HOME/.dotfiles/Helpers/colors.sh"

if [ -z "$1" ]; then
	error "Error: Please provide a file path."
	exit 1
fi

CONFIG_FILE="$HOME/.dotfiles/config.json"
TARGET_FILE=$1
FILENAME=$(basename "$TARGET_FILE")
USER=$(jq -r '."CodamHeader"."username"' "$CONFIG_FILE" 2>/dev/null || whoami)
MAIL=$(jq -r '."CodamHeader"."email"' "$CONFIG_FILE" 2>/dev/null || echo "user@example.com")

generate_line() {
	local max_len=$(( $(jq -r '."CodamHeader"."length"' "$CONFIG_FILE") \
					- ($(jq -r '."CodamHeader"."margin"' "$CONFIG_FILE") * 2) \
					- ${#2} - 6 ))
	local margin=$(printf '%*s' $(jq -r '."CodamHeader"."margin"' "$CONFIG_FILE"))
	local spaces=$(printf '%*s' $(( max_len - ${#1} )) '')

	echo "/* $margin$1$spaces$2$margin */"
}

generate_header() {
	local fill_line="/* $(printf '%*s' $(($(jq -r '."CodamHeader"."length"' "$CONFIG_FILE") - 6)) '' | tr ' ' '*') */"
	local empty_line=$(generate_line "" "")
	local date=$(date +"%Y/%m/%d %H:%M:%S")
	ascii=()
	i=0
	while IFS= read -r line; do
		ascii[$i]="$line"
		i=$((i+1))
	done < <(jq -r '."CodamHeader"."asciiart"[]' "$CONFIG_FILE")

	echo "$fill_line"
	echo "$empty_line"
	echo "$(generate_line "" "${ascii[0]}")"
	echo "$(generate_line "$FILENAME" "${ascii[1]}")"
	echo "$(generate_line "" "${ascii[2]}")"
	echo "$(generate_line "By: $USER <$MAIL>" "${ascii[3]}")"
	echo "$(generate_line "" "${ascii[4]}")"
	echo "$(generate_line "Created: $date by $USER" "${ascii[5]}")"
	echo "$(generate_line "Updated: $date by $USER" "${ascii[6]}")"
	echo "$empty_line"
	echo "$fill_line"
}

has_header() {
	local expected=("$@")
	local -a line_numbers=(1 2 10 11)

	for i in "${!line_numbers[@]}"; do
		local n="${line_numbers[$i]}"
		local file_line
		file_line=$(sed -n "${n}p" "$TARGET_FILE")

		if [[ "$file_line" != "${expected[$n-1]}" ]]; then
			return 1
		fi
	done
	return 0
}

insert_header() {
	{
		for line in "${header[@]}"; do
			echo "$line"
		done
		echo ""
		cat "$TARGET_FILE"
	} > "$TARGET_FILE.new"

	mv "$TARGET_FILE.new" "$TARGET_FILE"
}

update_header() {
	local created_line=$(sed -n '8p' "$TARGET_FILE")

	new_header=()
	while IFS= read -r line; do
		new_header+=("$line")
	done < <(generate_header)

	local margin=$(jq -r '."CodamHeader"."margin"' "$CONFIG_FILE")
	local last_ascii=$(jq -r '."CodamHeader"."asciiart"[6]' "$CONFIG_FILE")
	local sum=$(( ${#last_ascii} + margin + 3 ))

	local prefix="${created_line:0:${#created_line}-$sum}"
	local suffix="${new_header[7]: -$sum}"
	new_header[7]="$prefix$suffix"

	tmpfile=$(mktemp)
	{
		for line in "${new_header[@]}"; do
			echo "$line"
		done
		tail -n +$((${#new_header[@]}+1)) "$TARGET_FILE"
	} > "$tmpfile"

	mv "$tmpfile" "$TARGET_FILE"
}

stdheader()
{
	header=()
	while IFS= read -r line; do
		header+=("$line")
	done < <(generate_header)

	if has_header "${header[@]}"; then
		update_header
	elif [ $(jq -r '."CodamHeader"."autoinsert"' "$CONFIG_FILE") == true ]; then
		insert_header
	fi
}

stdheader
